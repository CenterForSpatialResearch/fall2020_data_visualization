<!DOCTYPE html>
<html lang="en">
	<head>

		<meta charset="utf-8">
		<title>D3: Time axis, prettier</title>
		<script type="text/javascript" src="../d3.js"></script>
		<style type="text/css">
			/* No style rules here yet */

		</style>

	</head>
	<body style="background-color:powderblue">

		<p>Ski Resorts: A = Winter Park ; B = Copper Mountain ; C = Steamboat Springs ; D = Jackson Hole ; E = Big Sky</p>
		<script type="text/javascript">
            //ASSIGNMENT:
            //add a text label above each circle that shows its value
            //change the color of each circle and line according to its value using a scale not a threshold
            //change the x axis so that each line and circle has a corresponding tick value

            //again, the word TODO: marks where the code you write could be added

			//Width and height
			var w = 700;
			var h = 350;
			var padding = 60;

			var dataset, xScale, yScale, xAxis, yAxis, cScale;  //Empty, for now






			//For converting strings to Dates
			var parseTime = d3.timeParse("%m/%d/%y");

			//For converting Dates to strings
			var formatTime = d3.timeFormat("%e");

			//Function for converting CSV values from strings to Dates and numbers
			var rowConverter = function(d) {
				return {
					Date: parseTime(d.Date),
					Amount: parseInt(d.Amount),

					Resort: d.Resort,
					Speed: parseInt(d.Speed),
					Miles: parseInt(d.Miles)
				};
			}

			//Load in the data
			d3.csv("Ski_Data_Project.csv", rowConverter)
            .then(function(data) {

				//Copy data into global dataset
				dataset = data;

				//Discover start and end dates in dataset
				var startDate = d3.min(dataset, function(d) { return d.Date; });
				var endDate = d3.max(dataset, function(d) { return d.Date; });

				//Create scale functions
				//xScale = d3.scaleTime()
							//   .domain([
							//		d3.timeDay.offset(startDate, -1),  //startDate minus one day, for padding
							//		d3.timeDay.offset(endDate, 1)	  //endDate plus one day, for padding
							//	])
							//   .range([padding, w - padding]);
							xScale = d3.scaleLinear()
							.domain([-1,10])
							.range([padding, w - padding]);
				yScale = d3.scaleLinear()
							   .domain([
									9,  //Because I want a zero baseline
									d3.max(dataset, function(d) { return d.Amount; })
								])
							   .range([h - padding, padding]);

               //TODO: make a linear scale named cScale for the colors you will use
                //HINT: the domain is the Amount, and the range is an array of 2 colors such as ["red","blue"]

				cScale = d3.scaleLinear()
							   .domain([
									1,  //Because I want a zero baseline
									d3.max(dataset, function(d) { return d.Amount; })
								])
							   .range(["red", "blue"]);

				//Define X axis
				xAxis = d3.axisBottom()
								  .scale(xScale)
								  .ticks(5)//TODO: change ticks
								  //.tickFormat(formatTime);

				//Define Y axis
				yAxis = d3.axisLeft()
								  .scale(yScale)
								  .ticks(10);



				//Create SVG element
				var svg = d3.select("body")
							.append("svg")
							.attr("width", w)
							.attr("height", h);

//Create Triangles//
// svg.selectAll(".triangle")
// .data(dataset)
// .enter()
// .append("line")
              
              var mountainHeightScale = d3.scaleLinear().domain([0,100]).range([0,h])
              
              
              function drawTriangle(mountainHeight,mountainX){
                var tData = [0,mountainHeight,0]
                var line = d3.line()
                    .x(function(d,i){
                          return xScale(i-1)
                    })
                    .y(function(d,i){
                            return h-mountainHeightScale(d)-padding
                    })   
                  svg.append("path")
                      .data([tData])
                      .attr("d",line)
                      .attr("fill", "white")
                      .attr("opacity",.5)
                      .attr("transform","translate("+xScale(mountainX-2)+",0)")
              }      
              


              //Is Amount the height of the resort?
              for(var m in dataset){
                var mountainHeight = dataset[m].Amount
                var mountainX = m
                if(m!="columns"){
                  drawTriangle(mountainHeight,mountainX)
                }
              }

				//Generate guide lines
		   svg.selectAll("line")
            .data(dataset)
            .enter()
            .append("line")
            .attr("x1", function(d,i) {
    
                return xScale(i);
            })
            .attr("x2", function(d,i) {
             return xScale(i)
                return xScale(d.Date);
            })
            .attr("y2", h - padding)
            .attr("y1", function(d) {
                return yScale(d.Amount);
            })
                        .attr("stroke",function(d){
                            //TODO: replace the color below by using your newly created cScale turn the amount into a corresponding color
                           return cScale(d.Amount)
                        })
            .attr("stroke-width", 4);

				//Generate circles last, so they appear in front
				svg.selectAll("circle")
				   .data(dataset)
				   .enter()
				   .append("circle")
				   .attr("cx", function(d,i) {
				   		return xScale(i);
				   })
				   .attr("cy", function(d) {
				   		return yScale(d.Amount);
				   })
				   .attr("r", 7)
                   .attr("fill",function(d){
										 return cScale(d.Amount)
                       //TODO: use your newly created cScale to the amount and return the corresponding color
})
											 									 .on("mouseover", function(d) {
											 										 console.log(d)
											 										//Get this bar's x/y values, then augment for the tooltip
											 										var xPosition = parseFloat(d3.select(this).attr("cx"));
											 										var yPosition = parseFloat(d3.select(this).attr("cy"));
											    							d3.select(this).attr("fill","white")
											 										//Create the tooltip label
											 										svg.append("text")
											 											 .attr("id", "tooltip")
											 											 .attr("x", xPosition)
											 											 .attr("y", yPosition-10)
											 											 .attr("text-anchor", "middle")
											 											 .attr("font-family", "sans-serif")
											 											 .attr("font-size", "8px")
											 											 .attr("font-weight", "bold")
											 											 .attr("fill", "black")
											 											 .text(d.Resort+" "+ d.Miles);

											 									 })
											 									 .on("mouseout", function() {
											 									d3.select(this).attr("fill","gray")
											 										//Remove the tooltip
											 										d3.select("#tooltip").remove();

															 //Create X axis
															 svg.append("g")
																 .attr("class", "axis")
																 .attr("transform", "translate(0," + (h - padding) + ")")
																 .call(xAxis);

															 //Create Y axis
															 svg.append("g")
																 .attr("class", "axis")
																 .attr("transform", "translate(" + padding + ",0)")
																 .call(yAxis);
                   });

	   			//Create X axis
	   			svg.append("g")
	   				.attr("class", "axis")
	   				.attr("transform", "translate(0," + (h - padding) + ")")
	   				.call(xAxis);

	   			//Create Y axis
	   			svg.append("g")
	   				.attr("class", "axis")
	   				.attr("transform", "translate(" + padding + ",0)")
	   				.call(yAxis);

			});

		</script>
	</body>
</html>
